%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 385 252
%%Creator: yExport 1.5
%%Producer: org.freehep.graphicsio.ps.EPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Wednesday, March 1, 2017 3:11:00 PM MSK
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
385 252 setpagesize
0 0 0 0 setmargins
0 0 setorigin
385 252 setsize
naturalsize
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
385.000 0.00000 l
385.000 252.000 l
0.00000 252.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
385.000 0.00000 l
385.000 252.000 l
0.00000 252.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 385 252 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -399.000 -294.000 ] concat
1.00000 1.00000 1.00000 RG
newpath
399.000 294.000 m
784.000 294.000 l
784.000 546.000 l
399.000 546.000 l
399.000 294.000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -399.000 -294.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -399.000 -294.000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -399.000 -294.000 ] defaultmatrix matrix concatmatrix setmatrix
2.00000 w
0 J
1.45000 M
newpath
511.000 420.000 m
511.000 431.598 489.286 441.000 462.500 441.000  c
435.714 441.000 414.000 431.598 414.000 420.000  c
414.000 408.402 435.714 399.000 462.500 399.000  c
489.286 399.000 511.000 408.402 511.000 420.000  c
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
444.188 420.294 m
444.188 426.231 l
442.579 426.231 l
442.579 420.341 l
442.579 419.414 442.397 418.718 442.032 418.255  c
441.668 417.791 441.121 417.560 440.392 417.560  c
439.517 417.560 438.829 417.838 438.329 418.396  c
437.829 418.953 437.579 419.711 437.579 420.669  c
437.579 426.231 l
435.954 426.231 l
435.954 416.388 l
437.579 416.388 l
437.579 417.919 l
437.965 417.325 438.420 416.882 438.946 416.591  c
439.472 416.299 440.074 416.153 440.751 416.153  c
441.886 416.153 442.743 416.502 443.321 417.200  c
443.899 417.898 444.188 418.929 444.188 420.294  c
h
451.237 417.528 m
450.362 417.528 449.675 417.864 449.175 418.536  c
448.675 419.208 448.425 420.138 448.425 421.325  c
448.425 422.502 448.675 423.429 449.175 424.106  c
449.675 424.784 450.362 425.122 451.237 425.122  c
452.091 425.122 452.771 424.781 453.276 424.099  c
453.782 423.416 454.034 422.492 454.034 421.325  c
454.034 420.159 453.782 419.234 453.276 418.552  c
452.771 417.869 452.091 417.528 451.237 417.528  c
h
451.237 416.153 m
452.644 416.153 453.748 416.609 454.550 417.521  c
455.352 418.432 455.753 419.700 455.753 421.325  c
455.753 422.929 455.352 424.190 454.550 425.106  c
453.748 426.023 452.644 426.481 451.237 426.481  c
449.821 426.481 448.714 426.023 447.917 425.106  c
447.120 424.190 446.722 422.929 446.722 421.325  c
446.722 419.700 447.120 418.432 447.917 417.521  c
448.714 416.609 449.821 416.153 451.237 416.153  c
h
464.906 417.888 m
464.906 412.560 l
466.531 412.560 l
466.531 426.231 l
464.906 426.231 l
464.906 424.747 l
464.573 425.341 464.146 425.778 463.625 426.060  c
463.104 426.341 462.479 426.481 461.750 426.481  c
460.562 426.481 459.596 426.007 458.852 425.060  c
458.107 424.112 457.734 422.867 457.734 421.325  c
457.734 419.773 458.107 418.523 458.852 417.575  c
459.596 416.627 460.562 416.153 461.750 416.153  c
462.479 416.153 463.104 416.294 463.625 416.575  c
464.146 416.856 464.573 417.294 464.906 417.888  c
h
459.391 421.325 m
459.391 422.513 459.635 423.445 460.125 424.122  c
460.615 424.799 461.292 425.138 462.156 425.138  c
463.010 425.138 463.682 424.799 464.172 424.122  c
464.661 423.445 464.906 422.513 464.906 421.325  c
464.906 420.127 464.661 419.190 464.172 418.513  c
463.682 417.836 463.010 417.497 462.156 417.497  c
461.292 417.497 460.615 417.836 460.125 418.513  c
459.635 419.190 459.391 420.127 459.391 421.325  c
h
478.270 420.903 m
478.270 421.700 l
470.848 421.700 l
470.910 422.815 471.243 423.664 471.848 424.247  c
472.452 424.830 473.290 425.122 474.363 425.122  c
474.978 425.122 475.577 425.044 476.160 424.888  c
476.743 424.731 477.322 424.502 477.895 424.200  c
477.895 425.731 l
477.322 425.981 476.730 426.169 476.121 426.294  c
475.512 426.419 474.889 426.481 474.254 426.481  c
472.691 426.481 471.452 426.026 470.535 425.114  c
469.618 424.203 469.160 422.966 469.160 421.403  c
469.160 419.789 469.595 418.510 470.465 417.567  c
471.335 416.625 472.504 416.153 473.973 416.153  c
475.306 416.153 476.355 416.578 477.121 417.427  c
477.887 418.276 478.270 419.435 478.270 420.903  c
h
476.660 420.435 m
476.650 419.549 476.402 418.843 475.918 418.317  c
475.434 417.791 474.796 417.528 474.004 417.528  c
473.098 417.528 472.374 417.781 471.832 418.286  c
471.290 418.791 470.978 419.507 470.895 420.435  c
476.660 420.435 l
h
481.469 424.731 m
484.375 424.731 l
484.375 414.731 l
481.219 415.356 l
481.219 413.747 l
484.344 413.106 l
486.125 413.106 l
486.125 424.731 l
489.031 424.731 l
489.031 426.231 l
481.469 426.231 l
481.469 424.731 l
h
f
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
769.000 330.000 m
769.000 341.598 747.286 351.000 720.500 351.000  c
693.714 351.000 672.000 341.598 672.000 330.000  c
672.000 318.402 693.714 309.000 720.500 309.000  c
747.286 309.000 769.000 318.402 769.000 330.000  c
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
702.188 330.294 m
702.188 336.231 l
700.579 336.231 l
700.579 330.341 l
700.579 329.414 700.397 328.718 700.032 328.255  c
699.668 327.791 699.121 327.560 698.392 327.560  c
697.517 327.560 696.829 327.838 696.329 328.396  c
695.829 328.953 695.579 329.711 695.579 330.669  c
695.579 336.231 l
693.954 336.231 l
693.954 326.388 l
695.579 326.388 l
695.579 327.919 l
695.965 327.325 696.420 326.882 696.946 326.591  c
697.472 326.299 698.074 326.153 698.751 326.153  c
699.886 326.153 700.743 326.502 701.321 327.200  c
701.899 327.898 702.188 328.929 702.188 330.294  c
h
709.237 327.528 m
708.362 327.528 707.675 327.864 707.175 328.536  c
706.675 329.208 706.425 330.138 706.425 331.325  c
706.425 332.502 706.675 333.429 707.175 334.106  c
707.675 334.784 708.362 335.122 709.237 335.122  c
710.091 335.122 710.771 334.781 711.276 334.099  c
711.782 333.416 712.034 332.492 712.034 331.325  c
712.034 330.159 711.782 329.234 711.276 328.552  c
710.771 327.869 710.091 327.528 709.237 327.528  c
h
709.237 326.153 m
710.644 326.153 711.748 326.609 712.550 327.521  c
713.352 328.432 713.753 329.700 713.753 331.325  c
713.753 332.929 713.352 334.190 712.550 335.106  c
711.748 336.023 710.644 336.481 709.237 336.481  c
707.821 336.481 706.714 336.023 705.917 335.106  c
705.120 334.190 704.722 332.929 704.722 331.325  c
704.722 329.700 705.120 328.432 705.917 327.521  c
706.714 326.609 707.821 326.153 709.237 326.153  c
h
722.906 327.888 m
722.906 322.560 l
724.531 322.560 l
724.531 336.231 l
722.906 336.231 l
722.906 334.747 l
722.573 335.341 722.146 335.778 721.625 336.060  c
721.104 336.341 720.479 336.481 719.750 336.481  c
718.562 336.481 717.596 336.007 716.852 335.060  c
716.107 334.112 715.734 332.867 715.734 331.325  c
715.734 329.773 716.107 328.523 716.852 327.575  c
717.596 326.627 718.562 326.153 719.750 326.153  c
720.479 326.153 721.104 326.294 721.625 326.575  c
722.146 326.856 722.573 327.294 722.906 327.888  c
h
717.391 331.325 m
717.391 332.513 717.635 333.445 718.125 334.122  c
718.615 334.799 719.292 335.138 720.156 335.138  c
721.010 335.138 721.682 334.799 722.172 334.122  c
722.661 333.445 722.906 332.513 722.906 331.325  c
722.906 330.127 722.661 329.190 722.172 328.513  c
721.682 327.836 721.010 327.497 720.156 327.497  c
719.292 327.497 718.615 327.836 718.125 328.513  c
717.635 329.190 717.391 330.127 717.391 331.325  c
h
736.270 330.903 m
736.270 331.700 l
728.848 331.700 l
728.910 332.815 729.243 333.664 729.848 334.247  c
730.452 334.830 731.290 335.122 732.363 335.122  c
732.978 335.122 733.577 335.044 734.160 334.888  c
734.743 334.731 735.322 334.502 735.895 334.200  c
735.895 335.731 l
735.322 335.981 734.730 336.169 734.121 336.294  c
733.512 336.419 732.889 336.481 732.254 336.481  c
730.691 336.481 729.452 336.026 728.535 335.114  c
727.618 334.203 727.160 332.966 727.160 331.403  c
727.160 329.789 727.595 328.510 728.465 327.567  c
729.335 326.625 730.504 326.153 731.973 326.153  c
733.306 326.153 734.355 326.578 735.121 327.427  c
735.887 328.276 736.270 329.435 736.270 330.903  c
h
734.660 330.435 m
734.650 329.549 734.402 328.843 733.918 328.317  c
733.434 327.791 732.796 327.528 732.004 327.528  c
731.098 327.528 730.374 327.781 729.832 328.286  c
729.290 328.791 728.978 329.507 728.895 330.435  c
734.660 330.435 l
h
740.688 334.731 m
746.891 334.731 l
746.891 336.231 l
738.547 336.231 l
738.547 334.731 l
739.224 334.034 740.143 333.099 741.305 331.927  c
742.466 330.755 743.198 329.997 743.500 329.653  c
744.073 329.018 744.471 328.479 744.695 328.036  c
744.919 327.593 745.031 327.159 745.031 326.731  c
745.031 326.034 744.786 325.466 744.297 325.028  c
743.807 324.591 743.172 324.372 742.391 324.372  c
741.828 324.372 741.240 324.468 740.625 324.661  c
740.010 324.854 739.349 325.143 738.641 325.528  c
738.641 323.747 l
739.359 323.455 740.029 323.237 740.648 323.091  c
741.268 322.945 741.833 322.872 742.344 322.872  c
743.708 322.872 744.794 323.211 745.602 323.888  c
746.409 324.565 746.812 325.476 746.812 326.622  c
746.812 327.153 746.711 327.661 746.508 328.146  c
746.305 328.630 745.938 329.200 745.406 329.856  c
745.260 330.023 744.794 330.513 744.008 331.325  c
743.221 332.138 742.115 333.273 740.688 334.731  c
h
f
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
769.000 420.000 m
769.000 431.598 747.286 441.000 720.500 441.000  c
693.714 441.000 672.000 431.598 672.000 420.000  c
672.000 408.402 693.714 399.000 720.500 399.000  c
747.286 399.000 769.000 408.402 769.000 420.000  c
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
713.839 423.997 m
715.699 423.997 l
715.699 426.231 l
713.839 426.231 l
713.839 423.997 l
h
719.561 423.997 m
721.420 423.997 l
721.420 426.231 l
719.561 426.231 l
719.561 423.997 l
h
725.283 423.997 m
727.142 423.997 l
727.142 426.231 l
725.283 426.231 l
725.283 423.997 l
h
f
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
769.000 510.000 m
769.000 521.598 747.286 531.000 720.500 531.000  c
693.714 531.000 672.000 521.598 672.000 510.000  c
672.000 498.402 693.714 489.000 720.500 489.000  c
747.286 489.000 769.000 498.402 769.000 510.000  c
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
701.182 510.294 m
701.182 516.231 l
699.573 516.231 l
699.573 510.341 l
699.573 509.414 699.390 508.718 699.026 508.255  c
698.661 507.791 698.114 507.560 697.385 507.560  c
696.510 507.560 695.823 507.838 695.323 508.396  c
694.823 508.953 694.573 509.711 694.573 510.669  c
694.573 516.231 l
692.948 516.231 l
692.948 506.388 l
694.573 506.388 l
694.573 507.919 l
694.958 507.325 695.414 506.882 695.940 506.591  c
696.466 506.299 697.068 506.153 697.745 506.153  c
698.880 506.153 699.737 506.502 700.315 507.200  c
700.893 507.898 701.182 508.929 701.182 510.294  c
h
708.231 507.528 m
707.356 507.528 706.668 507.864 706.168 508.536  c
705.668 509.208 705.418 510.138 705.418 511.325  c
705.418 512.502 705.668 513.429 706.168 514.106  c
706.668 514.784 707.356 515.122 708.231 515.122  c
709.085 515.122 709.765 514.781 710.270 514.099  c
710.775 513.416 711.028 512.492 711.028 511.325  c
711.028 510.159 710.775 509.234 710.270 508.552  c
709.765 507.869 709.085 507.528 708.231 507.528  c
h
708.231 506.153 m
709.637 506.153 710.741 506.609 711.543 507.521  c
712.346 508.432 712.747 509.700 712.747 511.325  c
712.747 512.929 712.346 514.190 711.543 515.106  c
710.741 516.023 709.637 516.481 708.231 516.481  c
706.814 516.481 705.708 516.023 704.911 515.106  c
704.114 514.190 703.715 512.929 703.715 511.325  c
703.715 509.700 704.114 508.432 704.911 507.521  c
705.708 506.609 706.814 506.153 708.231 506.153  c
h
721.900 507.888 m
721.900 502.560 l
723.525 502.560 l
723.525 516.231 l
721.900 516.231 l
721.900 514.747 l
721.567 515.341 721.139 515.778 720.619 516.060  c
720.098 516.341 719.473 516.481 718.744 516.481  c
717.556 516.481 716.590 516.007 715.845 515.060  c
715.100 514.112 714.728 512.867 714.728 511.325  c
714.728 509.773 715.100 508.523 715.845 507.575  c
716.590 506.627 717.556 506.153 718.744 506.153  c
719.473 506.153 720.098 506.294 720.619 506.575  c
721.139 506.856 721.567 507.294 721.900 507.888  c
h
716.384 511.325 m
716.384 512.513 716.629 513.445 717.119 514.122  c
717.608 514.799 718.285 515.138 719.150 515.138  c
720.004 515.138 720.676 514.799 721.166 514.122  c
721.655 513.445 721.900 512.513 721.900 511.325  c
721.900 510.127 721.655 509.190 721.166 508.513  c
720.676 507.836 720.004 507.497 719.150 507.497  c
718.285 507.497 717.608 507.836 717.119 508.513  c
716.629 509.190 716.384 510.127 716.384 511.325  c
h
735.263 510.903 m
735.263 511.700 l
727.841 511.700 l
727.904 512.815 728.237 513.664 728.841 514.247  c
729.445 514.830 730.284 515.122 731.357 515.122  c
731.972 515.122 732.570 515.044 733.154 514.888  c
733.737 514.731 734.315 514.502 734.888 514.200  c
734.888 515.731 l
734.315 515.981 733.724 516.169 733.115 516.294  c
732.505 516.419 731.883 516.481 731.248 516.481  c
729.685 516.481 728.445 516.026 727.529 515.114  c
726.612 514.203 726.154 512.966 726.154 511.403  c
726.154 509.789 726.589 508.510 727.458 507.567  c
728.328 506.625 729.498 506.153 730.966 506.153  c
732.300 506.153 733.349 506.578 734.115 507.427  c
734.880 508.276 735.263 509.435 735.263 510.903  c
h
733.654 510.435 m
733.643 509.549 733.396 508.843 732.912 508.317  c
732.427 507.791 731.789 507.528 730.998 507.528  c
730.091 507.528 729.367 507.781 728.826 508.286  c
728.284 508.791 727.972 509.507 727.888 510.435  c
733.654 510.435 l
h
737.994 503.106 m
740.384 503.106 l
746.197 514.091 l
746.197 503.106 l
747.931 503.106 l
747.931 516.231 l
745.541 516.231 l
739.712 505.247 l
739.712 516.231 l
737.994 516.231 l
737.994 503.106 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
500.268 406.825 m
675.179 345.810 l
S
newpath
682.732 343.175 m
669.755 342.406 l
674.234 346.139 l
673.049 351.848 l
h
f
newpath
533.130 354.048 m
533.130 352.996 532.911 352.168 532.473 351.564  c
532.036 350.959 531.437 350.657 530.677 350.657  c
529.916 350.657 529.320 350.959 528.888 351.564  c
528.455 352.168 528.239 352.996 528.239 354.048  c
528.239 355.110 528.455 355.941 528.888 356.540  c
529.320 357.139 529.916 357.439 530.677 357.439  c
531.437 357.439 532.036 357.139 532.473 356.540  c
532.911 355.941 533.130 355.110 533.130 354.048  c
h
528.239 351.001 m
528.541 350.480 528.921 350.092 529.380 349.837  c
529.838 349.582 530.390 349.454 531.036 349.454  c
532.098 349.454 532.960 349.876 533.622 350.720  c
534.283 351.564 534.614 352.673 534.614 354.048  c
534.614 355.423 534.283 356.535 533.622 357.384  c
532.960 358.233 532.098 358.657 531.036 358.657  c
530.390 358.657 529.838 358.530 529.380 358.274  c
528.921 358.019 528.541 357.631 528.239 357.110  c
528.239 358.423 l
526.786 358.423 l
526.786 346.267 l
528.239 346.267 l
528.239 351.001 l
h
536.848 354.970 m
536.848 349.673 l
538.286 349.673 l
538.286 354.907 l
538.286 355.741 538.447 356.363 538.770 356.774  c
539.093 357.186 539.578 357.392 540.223 357.392  c
541.005 357.392 541.619 357.144 542.067 356.649  c
542.515 356.155 542.739 355.480 542.739 354.626  c
542.739 349.673 l
544.177 349.673 l
544.177 358.423 l
542.739 358.423 l
542.739 357.079 l
542.395 357.610 541.992 358.006 541.528 358.267  c
541.065 358.527 540.531 358.657 539.927 358.657  c
538.916 358.657 538.151 358.342 537.630 357.712  c
537.109 357.082 536.848 356.168 536.848 354.970  c
h
547.145 349.673 m
548.583 349.673 l
548.583 358.423 l
547.145 358.423 l
547.145 349.673 l
h
547.145 346.267 m
548.583 346.267 l
548.583 348.079 l
547.145 348.079 l
547.145 346.267 l
h
551.591 346.267 m
553.028 346.267 l
553.028 358.423 l
551.591 358.423 l
551.591 346.267 l
h
561.786 351.001 m
561.786 346.267 l
563.223 346.267 l
563.223 358.423 l
561.786 358.423 l
561.786 357.110 l
561.484 357.631 561.104 358.019 560.645 358.274  c
560.187 358.530 559.635 358.657 558.989 358.657  c
557.927 358.657 557.065 358.233 556.403 357.384  c
555.742 356.535 555.411 355.423 555.411 354.048  c
555.411 352.673 555.742 351.564 556.403 350.720  c
557.065 349.876 557.927 349.454 558.989 349.454  c
559.635 349.454 560.187 349.582 560.645 349.837  c
561.104 350.092 561.484 350.480 561.786 351.001  c
h
556.895 354.048 m
556.895 355.110 557.111 355.941 557.544 356.540  c
557.976 357.139 558.572 357.439 559.333 357.439  c
560.093 357.439 560.692 357.139 561.130 356.540  c
561.567 355.941 561.786 355.110 561.786 354.048  c
561.786 352.996 561.567 352.168 561.130 351.564  c
560.692 350.959 560.093 350.657 559.333 350.657  c
558.572 350.657 557.976 350.959 557.544 351.564  c
557.111 352.168 556.895 352.996 556.895 354.048  c
h
572.700 347.189 m
572.700 349.673 l
575.653 349.673 l
575.653 350.782 l
572.700 350.782 l
572.700 355.532 l
572.700 356.251 572.796 356.712 572.989 356.915  c
573.182 357.118 573.580 357.220 574.184 357.220  c
575.653 357.220 l
575.653 358.423 l
574.184 358.423 l
573.070 358.423 572.302 358.215 571.880 357.798  c
571.458 357.381 571.247 356.626 571.247 355.532  c
571.247 350.782 l
570.200 350.782 l
570.200 349.673 l
571.247 349.673 l
571.247 347.189 l
572.700 347.189 l
h
582.614 351.017 m
582.458 350.923 582.283 350.853 582.091 350.806  c
581.898 350.759 581.687 350.735 581.458 350.735  c
580.645 350.735 580.023 351.001 579.591 351.532  c
579.158 352.064 578.942 352.824 578.942 353.814  c
578.942 358.423 l
577.489 358.423 l
577.489 349.673 l
578.942 349.673 l
578.942 351.032 l
579.244 350.501 579.638 350.105 580.122 349.845  c
580.606 349.584 581.192 349.454 581.880 349.454  c
581.984 349.454 582.096 349.462 582.216 349.478  c
582.335 349.493 582.468 349.511 582.614 349.532  c
582.614 351.017 l
h
591.614 353.689 m
591.614 354.392 l
585.005 354.392 l
585.067 355.381 585.364 356.134 585.895 356.649  c
586.427 357.165 587.171 357.423 588.130 357.423  c
588.682 357.423 589.216 357.355 589.731 357.220  c
590.247 357.084 590.760 356.881 591.270 356.610  c
591.270 357.970 l
590.760 358.189 590.234 358.358 589.692 358.478  c
589.151 358.597 588.598 358.657 588.036 358.657  c
586.640 358.657 585.536 358.248 584.723 357.431  c
583.911 356.613 583.505 355.511 583.505 354.126  c
583.505 352.699 583.890 351.564 584.661 350.720  c
585.432 349.876 586.473 349.454 587.786 349.454  c
588.963 349.454 589.895 349.834 590.583 350.595  c
591.270 351.355 591.614 352.386 591.614 353.689  c
h
590.177 353.267 m
590.166 352.475 589.945 351.845 589.513 351.376  c
589.080 350.907 588.510 350.673 587.802 350.673  c
586.999 350.673 586.359 350.899 585.880 351.353  c
585.401 351.806 585.124 352.444 585.052 353.267  c
590.177 353.267 l
h
601.458 353.689 m
601.458 354.392 l
594.848 354.392 l
594.911 355.381 595.208 356.134 595.739 356.649  c
596.270 357.165 597.015 357.423 597.973 357.423  c
598.526 357.423 599.059 357.355 599.575 357.220  c
600.091 357.084 600.604 356.881 601.114 356.610  c
601.114 357.970 l
600.604 358.189 600.078 358.358 599.536 358.478  c
598.994 358.597 598.442 358.657 597.880 358.657  c
596.484 358.657 595.380 358.248 594.567 357.431  c
593.755 356.613 593.348 355.511 593.348 354.126  c
593.348 352.699 593.734 351.564 594.505 350.720  c
595.276 349.876 596.317 349.454 597.630 349.454  c
598.807 349.454 599.739 349.834 600.427 350.595  c
601.114 351.355 601.458 352.386 601.458 353.689  c
h
600.020 353.267 m
600.010 352.475 599.789 351.845 599.356 351.376  c
598.924 350.907 598.354 350.673 597.645 350.673  c
596.843 350.673 596.203 350.899 595.723 351.353  c
595.244 351.806 594.968 352.444 594.895 353.267  c
600.020 353.267 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
511.000 420.000 m
664.000 420.000 l
S
newpath
672.000 420.000 m
660.000 415.000 l
663.000 420.000 l
660.000 425.000 l
h
f
newpath
595.828 391.164 m
595.828 390.112 595.609 389.284 595.172 388.680  c
594.734 388.076 594.135 387.773 593.375 387.773  c
592.615 387.773 592.018 388.076 591.586 388.680  c
591.154 389.284 590.938 390.112 590.938 391.164  c
590.938 392.227 591.154 393.057 591.586 393.656  c
592.018 394.255 592.615 394.555 593.375 394.555  c
594.135 394.555 594.734 394.255 595.172 393.656  c
595.609 393.057 595.828 392.227 595.828 391.164  c
h
590.938 388.117 m
591.240 387.596 591.620 387.208 592.078 386.953  c
592.536 386.698 593.089 386.570 593.734 386.570  c
594.797 386.570 595.659 386.992 596.320 387.836  c
596.982 388.680 597.312 389.789 597.312 391.164  c
597.312 392.539 596.982 393.651 596.320 394.500  c
595.659 395.349 594.797 395.773 593.734 395.773  c
593.089 395.773 592.536 395.646 592.078 395.391  c
591.620 395.135 591.240 394.747 590.938 394.227  c
590.938 395.539 l
589.484 395.539 l
589.484 383.383 l
590.938 383.383 l
590.938 388.117 l
h
599.547 392.086 m
599.547 386.789 l
600.984 386.789 l
600.984 392.023 l
600.984 392.857 601.146 393.479 601.469 393.891  c
601.792 394.302 602.276 394.508 602.922 394.508  c
603.703 394.508 604.318 394.260 604.766 393.766  c
605.214 393.271 605.438 392.596 605.438 391.742  c
605.438 386.789 l
606.875 386.789 l
606.875 395.539 l
605.438 395.539 l
605.438 394.195 l
605.094 394.727 604.690 395.122 604.227 395.383  c
603.763 395.643 603.229 395.773 602.625 395.773  c
601.615 395.773 600.849 395.458 600.328 394.828  c
599.807 394.198 599.547 393.284 599.547 392.086  c
h
609.844 386.789 m
611.281 386.789 l
611.281 395.539 l
609.844 395.539 l
609.844 386.789 l
h
609.844 383.383 m
611.281 383.383 l
611.281 385.195 l
609.844 385.195 l
609.844 383.383 l
h
614.289 383.383 m
615.727 383.383 l
615.727 395.539 l
614.289 395.539 l
614.289 383.383 l
h
624.484 388.117 m
624.484 383.383 l
625.922 383.383 l
625.922 395.539 l
624.484 395.539 l
624.484 394.227 l
624.182 394.747 623.802 395.135 623.344 395.391  c
622.885 395.646 622.333 395.773 621.688 395.773  c
620.625 395.773 619.763 395.349 619.102 394.500  c
618.440 393.651 618.109 392.539 618.109 391.164  c
618.109 389.789 618.440 388.680 619.102 387.836  c
619.763 386.992 620.625 386.570 621.688 386.570  c
622.333 386.570 622.885 386.698 623.344 386.953  c
623.802 387.208 624.182 387.596 624.484 388.117  c
h
619.594 391.164 m
619.594 392.227 619.810 393.057 620.242 393.656  c
620.674 394.255 621.271 394.555 622.031 394.555  c
622.792 394.555 623.391 394.255 623.828 393.656  c
624.266 393.057 624.484 392.227 624.484 391.164  c
624.484 390.112 624.266 389.284 623.828 388.680  c
623.391 388.076 622.792 387.773 622.031 387.773  c
621.271 387.773 620.674 388.076 620.242 388.680  c
619.810 389.284 619.594 390.112 619.594 391.164  c
h
635.398 384.305 m
635.398 386.789 l
638.352 386.789 l
638.352 387.898 l
635.398 387.898 l
635.398 392.648 l
635.398 393.367 635.495 393.828 635.688 394.031  c
635.880 394.234 636.279 394.336 636.883 394.336  c
638.352 394.336 l
638.352 395.539 l
636.883 395.539 l
635.768 395.539 635.000 395.331 634.578 394.914  c
634.156 394.497 633.945 393.742 633.945 392.648  c
633.945 387.898 l
632.898 387.898 l
632.898 386.789 l
633.945 386.789 l
633.945 384.305 l
635.398 384.305 l
h
645.312 388.133 m
645.156 388.039 644.982 387.969 644.789 387.922  c
644.596 387.875 644.385 387.852 644.156 387.852  c
643.344 387.852 642.721 388.117 642.289 388.648  c
641.857 389.180 641.641 389.940 641.641 390.930  c
641.641 395.539 l
640.188 395.539 l
640.188 386.789 l
641.641 386.789 l
641.641 388.148 l
641.943 387.617 642.336 387.221 642.820 386.961  c
643.305 386.701 643.891 386.570 644.578 386.570  c
644.682 386.570 644.794 386.578 644.914 386.594  c
645.034 386.609 645.167 386.628 645.312 386.648  c
645.312 388.133 l
h
654.312 390.805 m
654.312 391.508 l
647.703 391.508 l
647.766 392.497 648.062 393.250 648.594 393.766  c
649.125 394.281 649.870 394.539 650.828 394.539  c
651.380 394.539 651.914 394.471 652.430 394.336  c
652.945 394.201 653.458 393.997 653.969 393.727  c
653.969 395.086 l
653.458 395.305 652.932 395.474 652.391 395.594  c
651.849 395.714 651.297 395.773 650.734 395.773  c
649.339 395.773 648.234 395.365 647.422 394.547  c
646.609 393.729 646.203 392.628 646.203 391.242  c
646.203 389.815 646.589 388.680 647.359 387.836  c
648.130 386.992 649.172 386.570 650.484 386.570  c
651.661 386.570 652.594 386.951 653.281 387.711  c
653.969 388.471 654.312 389.503 654.312 390.805  c
h
652.875 390.383 m
652.865 389.591 652.643 388.961 652.211 388.492  c
651.779 388.023 651.208 387.789 650.500 387.789  c
649.698 387.789 649.057 388.016 648.578 388.469  c
648.099 388.922 647.823 389.560 647.750 390.383  c
652.875 390.383 l
h
664.156 390.805 m
664.156 391.508 l
657.547 391.508 l
657.609 392.497 657.906 393.250 658.438 393.766  c
658.969 394.281 659.714 394.539 660.672 394.539  c
661.224 394.539 661.758 394.471 662.273 394.336  c
662.789 394.201 663.302 393.997 663.812 393.727  c
663.812 395.086 l
663.302 395.305 662.776 395.474 662.234 395.594  c
661.693 395.714 661.141 395.773 660.578 395.773  c
659.182 395.773 658.078 395.365 657.266 394.547  c
656.453 393.729 656.047 392.628 656.047 391.242  c
656.047 389.815 656.432 388.680 657.203 387.836  c
657.974 386.992 659.016 386.570 660.328 386.570  c
661.505 386.570 662.438 386.951 663.125 387.711  c
663.812 388.471 664.156 389.503 664.156 390.805  c
h
662.719 390.383 m
662.708 389.591 662.487 388.961 662.055 388.492  c
661.622 388.023 661.052 387.789 660.344 387.789  c
659.542 387.789 658.901 388.016 658.422 388.469  c
657.943 388.922 657.667 389.560 657.594 390.383  c
662.719 390.383 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
500.268 433.175 m
675.179 494.190 l
S
newpath
682.732 496.825 m
673.049 488.152 l
674.234 493.861 l
669.755 497.594 l
h
f
newpath
533.130 488.280 m
533.130 487.228 532.911 486.400 532.473 485.796  c
532.036 485.192 531.437 484.890 530.677 484.890  c
529.916 484.890 529.320 485.192 528.888 485.796  c
528.455 486.400 528.239 487.228 528.239 488.280  c
528.239 489.343 528.455 490.173 528.888 490.772  c
529.320 491.371 529.916 491.671 530.677 491.671  c
531.437 491.671 532.036 491.371 532.473 490.772  c
532.911 490.173 533.130 489.343 533.130 488.280  c
h
528.239 485.233 m
528.541 484.713 528.921 484.324 529.380 484.069  c
529.838 483.814 530.390 483.686 531.036 483.686  c
532.098 483.686 532.960 484.108 533.622 484.952  c
534.283 485.796 534.614 486.905 534.614 488.280  c
534.614 489.655 534.283 490.767 533.622 491.616  c
532.960 492.465 532.098 492.890 531.036 492.890  c
530.390 492.890 529.838 492.762 529.380 492.507  c
528.921 492.252 528.541 491.864 528.239 491.343  c
528.239 492.655 l
526.786 492.655 l
526.786 480.499 l
528.239 480.499 l
528.239 485.233 l
h
536.848 489.202 m
536.848 483.905 l
538.286 483.905 l
538.286 489.140 l
538.286 489.973 538.447 490.595 538.770 491.007  c
539.093 491.418 539.578 491.624 540.223 491.624  c
541.005 491.624 541.619 491.377 542.067 490.882  c
542.515 490.387 542.739 489.713 542.739 488.858  c
542.739 483.905 l
544.177 483.905 l
544.177 492.655 l
542.739 492.655 l
542.739 491.311 l
542.395 491.843 541.992 492.239 541.528 492.499  c
541.065 492.759 540.531 492.890 539.927 492.890  c
538.916 492.890 538.151 492.574 537.630 491.944  c
537.109 491.314 536.848 490.400 536.848 489.202  c
h
547.145 483.905 m
548.583 483.905 l
548.583 492.655 l
547.145 492.655 l
547.145 483.905 l
h
547.145 480.499 m
548.583 480.499 l
548.583 482.311 l
547.145 482.311 l
547.145 480.499 l
h
551.591 480.499 m
553.028 480.499 l
553.028 492.655 l
551.591 492.655 l
551.591 480.499 l
h
561.786 485.233 m
561.786 480.499 l
563.223 480.499 l
563.223 492.655 l
561.786 492.655 l
561.786 491.343 l
561.484 491.864 561.104 492.252 560.645 492.507  c
560.187 492.762 559.635 492.890 558.989 492.890  c
557.927 492.890 557.065 492.465 556.403 491.616  c
555.742 490.767 555.411 489.655 555.411 488.280  c
555.411 486.905 555.742 485.796 556.403 484.952  c
557.065 484.108 557.927 483.686 558.989 483.686  c
559.635 483.686 560.187 483.814 560.645 484.069  c
561.104 484.324 561.484 484.713 561.786 485.233  c
h
556.895 488.280 m
556.895 489.343 557.111 490.173 557.544 490.772  c
557.976 491.371 558.572 491.671 559.333 491.671  c
560.093 491.671 560.692 491.371 561.130 490.772  c
561.567 490.173 561.786 489.343 561.786 488.280  c
561.786 487.228 561.567 486.400 561.130 485.796  c
560.692 485.192 560.093 484.890 559.333 484.890  c
558.572 484.890 557.976 485.192 557.544 485.796  c
557.111 486.400 556.895 487.228 556.895 488.280  c
h
572.700 481.421 m
572.700 483.905 l
575.653 483.905 l
575.653 485.015 l
572.700 485.015 l
572.700 489.765 l
572.700 490.483 572.796 490.944 572.989 491.147  c
573.182 491.351 573.580 491.452 574.184 491.452  c
575.653 491.452 l
575.653 492.655 l
574.184 492.655 l
573.070 492.655 572.302 492.447 571.880 492.030  c
571.458 491.614 571.247 490.858 571.247 489.765  c
571.247 485.015 l
570.200 485.015 l
570.200 483.905 l
571.247 483.905 l
571.247 481.421 l
572.700 481.421 l
h
582.614 485.249 m
582.458 485.155 582.283 485.085 582.091 485.038  c
581.898 484.991 581.687 484.968 581.458 484.968  c
580.645 484.968 580.023 485.233 579.591 485.765  c
579.158 486.296 578.942 487.056 578.942 488.046  c
578.942 492.655 l
577.489 492.655 l
577.489 483.905 l
578.942 483.905 l
578.942 485.265 l
579.244 484.733 579.638 484.338 580.122 484.077  c
580.606 483.817 581.192 483.686 581.880 483.686  c
581.984 483.686 582.096 483.694 582.216 483.710  c
582.335 483.726 582.468 483.744 582.614 483.765  c
582.614 485.249 l
h
591.614 487.921 m
591.614 488.624 l
585.005 488.624 l
585.067 489.614 585.364 490.366 585.895 490.882  c
586.427 491.397 587.171 491.655 588.130 491.655  c
588.682 491.655 589.216 491.588 589.731 491.452  c
590.247 491.317 590.760 491.114 591.270 490.843  c
591.270 492.202 l
590.760 492.421 590.234 492.590 589.692 492.710  c
589.151 492.830 588.598 492.890 588.036 492.890  c
586.640 492.890 585.536 492.481 584.723 491.663  c
583.911 490.845 583.505 489.744 583.505 488.358  c
583.505 486.931 583.890 485.796 584.661 484.952  c
585.432 484.108 586.473 483.686 587.786 483.686  c
588.963 483.686 589.895 484.067 590.583 484.827  c
591.270 485.588 591.614 486.619 591.614 487.921  c
h
590.177 487.499 m
590.166 486.707 589.945 486.077 589.513 485.608  c
589.080 485.140 588.510 484.905 587.802 484.905  c
586.999 484.905 586.359 485.132 585.880 485.585  c
585.401 486.038 585.124 486.676 585.052 487.499  c
590.177 487.499 l
h
601.458 487.921 m
601.458 488.624 l
594.848 488.624 l
594.911 489.614 595.208 490.366 595.739 490.882  c
596.270 491.397 597.015 491.655 597.973 491.655  c
598.526 491.655 599.059 491.588 599.575 491.452  c
600.091 491.317 600.604 491.114 601.114 490.843  c
601.114 492.202 l
600.604 492.421 600.078 492.590 599.536 492.710  c
598.994 492.830 598.442 492.890 597.880 492.890  c
596.484 492.890 595.380 492.481 594.567 491.663  c
593.755 490.845 593.348 489.744 593.348 488.358  c
593.348 486.931 593.734 485.796 594.505 484.952  c
595.276 484.108 596.317 483.686 597.630 483.686  c
598.807 483.686 599.739 484.067 600.427 484.827  c
601.114 485.588 601.458 486.619 601.458 487.921  c
h
600.020 487.499 m
600.010 486.707 599.789 486.077 599.356 485.608  c
598.924 485.140 598.354 484.905 597.645 484.905  c
596.843 484.905 596.203 485.132 595.723 485.585  c
595.244 486.038 594.968 486.676 594.895 487.499  c
600.020 487.499 l
h
f
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore

%%Trailer
%%EOF
